#[doc = "Register `TSEL` reader"]
pub type R = crate::R<TselSpec>;
#[doc = "Register `TSEL` writer"]
pub type W = crate::W<TselSpec>;
#[doc = "External Trigger Select. #br# This selects which System Event is used if the input filter selects trigger. Triggers 0-15 are used to connect triggers generated by other timer modules in the same power domain. Refer to the SoC datasheet to get details. Triggers 16 and 17 are connected to event manager subscriber ports. Event lines 18-31 are reserved for future use.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u8)]
pub enum TselEtsel {
    #[doc = "0: TRIG0"]
    TselEtselTrig0 = 0,
    #[doc = "1: TRIG1"]
    TselEtselTrig1 = 1,
    #[doc = "2: TRIG2"]
    TselEtselTrig2 = 2,
    #[doc = "3: TRIG3"]
    TselEtselTrig3 = 3,
    #[doc = "4: TRIG4"]
    TselEtselTrig4 = 4,
    #[doc = "5: TRIG5"]
    TselEtselTrig5 = 5,
    #[doc = "6: TRIG6"]
    TselEtselTrig6 = 6,
    #[doc = "7: TRIG7"]
    TselEtselTrig7 = 7,
    #[doc = "8: TRIG8"]
    TselEtselTrig8 = 8,
    #[doc = "9: TRIG9"]
    TselEtselTrig9 = 9,
    #[doc = "10: TRIG10"]
    TselEtselTrig10 = 10,
    #[doc = "11: TRIG11"]
    TselEtselTrig11 = 11,
    #[doc = "12: TRIG12"]
    TselEtselTrig12 = 12,
    #[doc = "13: TRIG13"]
    TselEtselTrig13 = 13,
    #[doc = "14: TRIG14"]
    TselEtselTrig14 = 14,
    #[doc = "15: TRIG15"]
    TselEtselTrig15 = 15,
    #[doc = "16: TRIG_SUB0"]
    TselEtselTrigSub0 = 16,
    #[doc = "17: TRIG_SUB1"]
    TselEtselTrigSub1 = 17,
}
impl From<TselEtsel> for u8 {
    #[inline(always)]
    fn from(variant: TselEtsel) -> Self {
        variant as _
    }
}
impl crate::FieldSpec for TselEtsel {
    type Ux = u8;
}
impl crate::IsEnum for TselEtsel {}
#[doc = "Field `TSEL_ETSEL` reader - External Trigger Select. #br# This selects which System Event is used if the input filter selects trigger. Triggers 0-15 are used to connect triggers generated by other timer modules in the same power domain. Refer to the SoC datasheet to get details. Triggers 16 and 17 are connected to event manager subscriber ports. Event lines 18-31 are reserved for future use."]
pub type TselEtselR = crate::FieldReader<TselEtsel>;
impl TselEtselR {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Option<TselEtsel> {
        match self.bits {
            0 => Some(TselEtsel::TselEtselTrig0),
            1 => Some(TselEtsel::TselEtselTrig1),
            2 => Some(TselEtsel::TselEtselTrig2),
            3 => Some(TselEtsel::TselEtselTrig3),
            4 => Some(TselEtsel::TselEtselTrig4),
            5 => Some(TselEtsel::TselEtselTrig5),
            6 => Some(TselEtsel::TselEtselTrig6),
            7 => Some(TselEtsel::TselEtselTrig7),
            8 => Some(TselEtsel::TselEtselTrig8),
            9 => Some(TselEtsel::TselEtselTrig9),
            10 => Some(TselEtsel::TselEtselTrig10),
            11 => Some(TselEtsel::TselEtselTrig11),
            12 => Some(TselEtsel::TselEtselTrig12),
            13 => Some(TselEtsel::TselEtselTrig13),
            14 => Some(TselEtsel::TselEtselTrig14),
            15 => Some(TselEtsel::TselEtselTrig15),
            16 => Some(TselEtsel::TselEtselTrigSub0),
            17 => Some(TselEtsel::TselEtselTrigSub1),
            _ => None,
        }
    }
    #[doc = "TRIG0"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig0(&self) -> bool {
        *self == TselEtsel::TselEtselTrig0
    }
    #[doc = "TRIG1"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig1(&self) -> bool {
        *self == TselEtsel::TselEtselTrig1
    }
    #[doc = "TRIG2"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig2(&self) -> bool {
        *self == TselEtsel::TselEtselTrig2
    }
    #[doc = "TRIG3"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig3(&self) -> bool {
        *self == TselEtsel::TselEtselTrig3
    }
    #[doc = "TRIG4"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig4(&self) -> bool {
        *self == TselEtsel::TselEtselTrig4
    }
    #[doc = "TRIG5"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig5(&self) -> bool {
        *self == TselEtsel::TselEtselTrig5
    }
    #[doc = "TRIG6"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig6(&self) -> bool {
        *self == TselEtsel::TselEtselTrig6
    }
    #[doc = "TRIG7"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig7(&self) -> bool {
        *self == TselEtsel::TselEtselTrig7
    }
    #[doc = "TRIG8"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig8(&self) -> bool {
        *self == TselEtsel::TselEtselTrig8
    }
    #[doc = "TRIG9"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig9(&self) -> bool {
        *self == TselEtsel::TselEtselTrig9
    }
    #[doc = "TRIG10"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig10(&self) -> bool {
        *self == TselEtsel::TselEtselTrig10
    }
    #[doc = "TRIG11"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig11(&self) -> bool {
        *self == TselEtsel::TselEtselTrig11
    }
    #[doc = "TRIG12"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig12(&self) -> bool {
        *self == TselEtsel::TselEtselTrig12
    }
    #[doc = "TRIG13"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig13(&self) -> bool {
        *self == TselEtsel::TselEtselTrig13
    }
    #[doc = "TRIG14"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig14(&self) -> bool {
        *self == TselEtsel::TselEtselTrig14
    }
    #[doc = "TRIG15"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig15(&self) -> bool {
        *self == TselEtsel::TselEtselTrig15
    }
    #[doc = "TRIG_SUB0"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig_sub0(&self) -> bool {
        *self == TselEtsel::TselEtselTrigSub0
    }
    #[doc = "TRIG_SUB1"]
    #[inline(always)]
    pub fn is_tsel_etsel_trig_sub1(&self) -> bool {
        *self == TselEtsel::TselEtselTrigSub1
    }
}
#[doc = "Field `TSEL_ETSEL` writer - External Trigger Select. #br# This selects which System Event is used if the input filter selects trigger. Triggers 0-15 are used to connect triggers generated by other timer modules in the same power domain. Refer to the SoC datasheet to get details. Triggers 16 and 17 are connected to event manager subscriber ports. Event lines 18-31 are reserved for future use."]
pub type TselEtselW<'a, REG> = crate::FieldWriter<'a, REG, 5, TselEtsel>;
impl<'a, REG> TselEtselW<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
    REG::Ux: From<u8>,
{
    #[doc = "TRIG0"]
    #[inline(always)]
    pub fn tsel_etsel_trig0(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig0)
    }
    #[doc = "TRIG1"]
    #[inline(always)]
    pub fn tsel_etsel_trig1(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig1)
    }
    #[doc = "TRIG2"]
    #[inline(always)]
    pub fn tsel_etsel_trig2(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig2)
    }
    #[doc = "TRIG3"]
    #[inline(always)]
    pub fn tsel_etsel_trig3(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig3)
    }
    #[doc = "TRIG4"]
    #[inline(always)]
    pub fn tsel_etsel_trig4(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig4)
    }
    #[doc = "TRIG5"]
    #[inline(always)]
    pub fn tsel_etsel_trig5(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig5)
    }
    #[doc = "TRIG6"]
    #[inline(always)]
    pub fn tsel_etsel_trig6(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig6)
    }
    #[doc = "TRIG7"]
    #[inline(always)]
    pub fn tsel_etsel_trig7(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig7)
    }
    #[doc = "TRIG8"]
    #[inline(always)]
    pub fn tsel_etsel_trig8(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig8)
    }
    #[doc = "TRIG9"]
    #[inline(always)]
    pub fn tsel_etsel_trig9(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig9)
    }
    #[doc = "TRIG10"]
    #[inline(always)]
    pub fn tsel_etsel_trig10(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig10)
    }
    #[doc = "TRIG11"]
    #[inline(always)]
    pub fn tsel_etsel_trig11(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig11)
    }
    #[doc = "TRIG12"]
    #[inline(always)]
    pub fn tsel_etsel_trig12(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig12)
    }
    #[doc = "TRIG13"]
    #[inline(always)]
    pub fn tsel_etsel_trig13(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig13)
    }
    #[doc = "TRIG14"]
    #[inline(always)]
    pub fn tsel_etsel_trig14(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig14)
    }
    #[doc = "TRIG15"]
    #[inline(always)]
    pub fn tsel_etsel_trig15(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrig15)
    }
    #[doc = "TRIG_SUB0"]
    #[inline(always)]
    pub fn tsel_etsel_trig_sub0(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrigSub0)
    }
    #[doc = "TRIG_SUB1"]
    #[inline(always)]
    pub fn tsel_etsel_trig_sub1(self) -> &'a mut crate::W<REG> {
        self.variant(TselEtsel::TselEtselTrigSub1)
    }
}
#[doc = "Trigger Enable. This selects whether a trigger is enabled or not for this counter 0x0 = Triggers are not used 0x1 = Triggers are used as selected by the ETSEL field\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum TselTe {
    #[doc = "0: DISABLED"]
    TselTeDisabled = 0,
    #[doc = "1: ENABLED"]
    TselTeEnabled = 1,
}
impl From<TselTe> for bool {
    #[inline(always)]
    fn from(variant: TselTe) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `TSEL_TE` reader - Trigger Enable. This selects whether a trigger is enabled or not for this counter 0x0 = Triggers are not used 0x1 = Triggers are used as selected by the ETSEL field"]
pub type TselTeR = crate::BitReader<TselTe>;
impl TselTeR {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> TselTe {
        match self.bits {
            false => TselTe::TselTeDisabled,
            true => TselTe::TselTeEnabled,
        }
    }
    #[doc = "DISABLED"]
    #[inline(always)]
    pub fn is_tsel_te_disabled(&self) -> bool {
        *self == TselTe::TselTeDisabled
    }
    #[doc = "ENABLED"]
    #[inline(always)]
    pub fn is_tsel_te_enabled(&self) -> bool {
        *self == TselTe::TselTeEnabled
    }
}
#[doc = "Field `TSEL_TE` writer - Trigger Enable. This selects whether a trigger is enabled or not for this counter 0x0 = Triggers are not used 0x1 = Triggers are used as selected by the ETSEL field"]
pub type TselTeW<'a, REG> = crate::BitWriter<'a, REG, TselTe>;
impl<'a, REG> TselTeW<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "DISABLED"]
    #[inline(always)]
    pub fn tsel_te_disabled(self) -> &'a mut crate::W<REG> {
        self.variant(TselTe::TselTeDisabled)
    }
    #[doc = "ENABLED"]
    #[inline(always)]
    pub fn tsel_te_enabled(self) -> &'a mut crate::W<REG> {
        self.variant(TselTe::TselTeEnabled)
    }
}
impl R {
    #[doc = "Bits 0:4 - External Trigger Select. #br# This selects which System Event is used if the input filter selects trigger. Triggers 0-15 are used to connect triggers generated by other timer modules in the same power domain. Refer to the SoC datasheet to get details. Triggers 16 and 17 are connected to event manager subscriber ports. Event lines 18-31 are reserved for future use."]
    #[inline(always)]
    pub fn tsel_etsel(&self) -> TselEtselR {
        TselEtselR::new((self.bits & 0x1f) as u8)
    }
    #[doc = "Bit 9 - Trigger Enable. This selects whether a trigger is enabled or not for this counter 0x0 = Triggers are not used 0x1 = Triggers are used as selected by the ETSEL field"]
    #[inline(always)]
    pub fn tsel_te(&self) -> TselTeR {
        TselTeR::new(((self.bits >> 9) & 1) != 0)
    }
}
impl W {
    #[doc = "Bits 0:4 - External Trigger Select. #br# This selects which System Event is used if the input filter selects trigger. Triggers 0-15 are used to connect triggers generated by other timer modules in the same power domain. Refer to the SoC datasheet to get details. Triggers 16 and 17 are connected to event manager subscriber ports. Event lines 18-31 are reserved for future use."]
    #[inline(always)]
    pub fn tsel_etsel(&mut self) -> TselEtselW<TselSpec> {
        TselEtselW::new(self, 0)
    }
    #[doc = "Bit 9 - Trigger Enable. This selects whether a trigger is enabled or not for this counter 0x0 = Triggers are not used 0x1 = Triggers are used as selected by the ETSEL field"]
    #[inline(always)]
    pub fn tsel_te(&mut self) -> TselTeW<TselSpec> {
        TselTeW::new(self, 9)
    }
}
#[doc = "Trigger Select\n\nYou can [`read`](crate::Reg::read) this register and get [`tsel::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tsel::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct TselSpec;
impl crate::RegisterSpec for TselSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`tsel::R`](R) reader structure"]
impl crate::Readable for TselSpec {}
#[doc = "`write(|w| ..)` method takes [`tsel::W`](W) writer structure"]
impl crate::Writable for TselSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets TSEL to value 0"]
impl crate::Resettable for TselSpec {
    const RESET_VALUE: u32 = 0;
}
